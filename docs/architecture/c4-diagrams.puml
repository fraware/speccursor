@startuml C4_Context
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

LAYOUT_WITH_LEGEND()

title SpecCursor System Context

Person(developer, "Developer", "Software developer using SpecCursor for dependency management")

System_Boundary(speccursor, "SpecCursor System") {
    Container(gh_app, "GitHub App", "Node.js", "Handles webhooks and manages PRs")
    Container(controller, "Controller Service", "Node.js", "Orchestrates upgrade workflows")
    Container(worker_pool, "Worker Pool", "Rust", "Executes ecosystem-specific upgrades")
    Container(ai_service, "AI Service", "Node.js", "Claude-powered regression fixes")
    Container(lean_engine, "Lean Engine", "Lean 4.20.0", "Formal verification of invariants")
    Container(state_store, "State Store", "PostgreSQL", "Persistent data storage")
    Container(cache_store, "Cache Store", "Redis", "Temporary data and job queues")
}

System_Ext(github, "GitHub.com", "Source code hosting and CI/CD")
System_Ext(anthropic, "Anthropic Claude API", "AI code generation and patching")
System_Ext(lean_mathlib, "Lean 4.20.0 + Mathlib4", "Formal verification framework")

Rel(developer, gh_app, "Uses", "HTTPS")
Rel(gh_app, controller, "Triggers workflows", "Internal API")
Rel(controller, worker_pool, "Dispatches jobs", "gRPC")
Rel(worker_pool, ai_service, "Requests patches", "HTTP")
Rel(worker_pool, lean_engine, "Requests proofs", "Local IPC")
Rel(controller, state_store, "Stores data", "SQL")
Rel(controller, cache_store, "Caches data", "Redis")
Rel(ai_service, anthropic, "Generates code", "HTTPS")
Rel(lean_engine, lean_mathlib, "Imports theorems", "Local")
Rel(gh_app, github, "Manages PRs", "GitHub API")

@enduml

@startuml C4_Container
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_WITH_LEGEND()

title SpecCursor Container Diagram

Person(developer, "Developer", "Software developer")

System_Boundary(speccursor, "SpecCursor Platform") {
    Container(gh_app, "GitHub App", "Node.js, TypeScript", "Handles webhooks, manages PRs, and orchestrates upgrade workflows")
    Container(controller, "Controller Service", "Node.js, TypeScript", "Orchestrates upgrade workflows and manages state")
    Container(worker_pool, "Worker Pool", "Rust", "Executes ecosystem-specific upgrades with sandboxed execution")
    Container(ai_service, "AI Service", "Node.js, TypeScript", "Integrates with Claude API for code generation and patching")
    Container(lean_engine, "Lean Engine", "Lean 4.20.0", "Formal verification of code invariants using Mathlib4")
    Container(state_store, "State Store", "PostgreSQL 15", "Persistent storage for upgrade history, proof results, and system state")
    Container(cache_store, "Cache Store", "Redis 7", "Job queues, session storage, and temporary data caching")
    Container(metrics, "Metrics", "Prometheus", "System metrics and performance monitoring")
    Container(logs, "Logs", "Loki", "Structured logging and audit trails")
}

System_Ext(github, "GitHub.com", "Source code hosting")
System_Ext(anthropic, "Anthropic Claude API", "AI code generation")
System_Ext(lean_mathlib, "Lean 4.20.0 + Mathlib4", "Formal verification framework")

Rel(developer, gh_app, "Uses", "HTTPS")
Rel(gh_app, controller, "Triggers workflows", "Internal gRPC")
Rel(controller, worker_pool, "Dispatches jobs", "Redis Queue")
Rel(worker_pool, ai_service, "Requests patches", "HTTP/JSON")
Rel(worker_pool, lean_engine, "Requests proofs", "Local IPC")
Rel(controller, state_store, "Stores data", "SQL")
Rel(controller, cache_store, "Caches data", "Redis Protocol")
Rel(controller, metrics, "Exports metrics", "Prometheus Protocol")
Rel(controller, logs, "Writes logs", "HTTP/JSON")
Rel(ai_service, anthropic, "Generates code", "HTTPS/JSON")
Rel(lean_engine, lean_mathlib, "Imports theorems", "Local File System")
Rel(gh_app, github, "Manages PRs", "GitHub REST API")

@enduml

@startuml C4_Component
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()

title SpecCursor Component Diagram - Controller Service

Container_Boundary(controller, "Controller Service") {
    Component(webhook_handler, "Webhook Handler", "Express.js", "Handles GitHub webhook events")
    Component(workflow_orchestrator, "Workflow Orchestrator", "TypeScript", "Orchestrates upgrade workflows")
    Component(job_dispatcher, "Job Dispatcher", "TypeScript", "Dispatches jobs to worker pool")
    Component(state_manager, "State Manager", "TypeScript", "Manages application state")
    Component(auth_service, "Auth Service", "TypeScript", "Handles authentication and authorization")
    Component(metrics_collector, "Metrics Collector", "TypeScript", "Collects and exports metrics")
}

Container_Boundary(worker_pool, "Worker Pool") {
    Component(job_processor, "Job Processor", "Rust", "Processes upgrade jobs")
    Component(ecosystem_handler, "Ecosystem Handler", "Rust", "Handles different package ecosystems")
    Component(sandbox_manager, "Sandbox Manager", "Rust", "Manages execution sandboxes")
    Component(result_aggregator, "Result Aggregator", "Rust", "Aggregates job results")
}

Container_Boundary(ai_service, "AI Service") {
    Component(claude_client, "Claude Client", "TypeScript", "Claude API integration")
    Component(patch_generator, "Patch Generator", "TypeScript", "Generates code patches")
    Component(morph_applier, "Morph Applier", "TypeScript", "Applies patches using Morph")
    Component(validation_service, "Validation Service", "TypeScript", "Validates generated patches")
}

Rel(webhook_handler, workflow_orchestrator, "Triggers", "Internal API")
Rel(workflow_orchestrator, job_dispatcher, "Dispatches", "Internal API")
Rel(job_dispatcher, job_processor, "Sends job", "Redis Queue")
Rel(job_processor, ecosystem_handler, "Delegates", "Internal API")
Rel(ecosystem_handler, sandbox_manager, "Executes in", "Process API")
Rel(ecosystem_handler, claude_client, "Requests patch", "HTTP/JSON")
Rel(claude_client, patch_generator, "Generates", "Internal API")
Rel(patch_generator, morph_applier, "Applies", "Morph API")
Rel(morph_applier, validation_service, "Validates", "Internal API")
Rel(result_aggregator, state_manager, "Updates state", "gRPC")
Rel(workflow_orchestrator, auth_service, "Authenticates", "Internal API")
Rel(workflow_orchestrator, metrics_collector, "Records metrics", "Internal API")

@enduml

@startuml C4_Deployment
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml

LAYOUT_WITH_LEGEND()

title SpecCursor Deployment Diagram

Deployment_Node(aws, "AWS Cloud", "Amazon Web Services") {
    Deployment_Node(vpc, "VPC", "Virtual Private Cloud") {
        Deployment_Node(public_subnet, "Public Subnet", "Internet-facing services") {
            Container(alb, "Application Load Balancer", "AWS ALB", "Routes traffic to services")
        }
        
        Deployment_Node(private_subnet, "Private Subnet", "Internal services") {
            Container(gh_app, "GitHub App", "Docker, Node.js", "Handles webhooks")
            Container(controller, "Controller Service", "Docker, Node.js", "Orchestrates workflows")
            Container(worker_pool, "Worker Pool", "Docker, Rust", "Executes upgrades")
            Container(ai_service, "AI Service", "Docker, Node.js", "AI integration")
            Container(lean_engine, "Lean Engine", "Docker, Lean 4.20.0", "Formal verification")
        }
        
        Deployment_Node(data_subnet, "Data Subnet", "Database and storage") {
            Container(postgres, "PostgreSQL", "RDS", "Primary database")
            Container(redis, "Redis", "ElastiCache", "Cache and queues")
        }
        
        Deployment_Node(monitoring_subnet, "Monitoring Subnet", "Observability") {
            Container(prometheus, "Prometheus", "Docker", "Metrics collection")
            Container(grafana, "Grafana", "Docker", "Metrics visualization")
            Container(loki, "Loki", "Docker", "Log aggregation")
            Container(alertmanager, "Alertmanager", "Docker", "Alert management")
        }
    }
    
    Deployment_Node(secrets, "Secrets Management", "AWS Secrets Manager") {
        Container(secrets_manager, "Secrets Manager", "AWS", "Stores API keys and certificates")
    }
    
    Deployment_Node(artifacts, "Artifact Storage", "S3") {
        Container(s3_bucket, "S3 Bucket", "AWS S3", "Stores proof artifacts and logs")
    }
}

System_Ext(github, "GitHub.com", "Source code hosting")
System_Ext(anthropic, "Anthropic Claude API", "AI services")

Rel(alb, gh_app, "Routes traffic", "HTTPS")
Rel(alb, controller, "Routes traffic", "HTTPS")
Rel(gh_app, controller, "Internal communication", "gRPC")
Rel(controller, worker_pool, "Job dispatch", "Redis")
Rel(worker_pool, ai_service, "Patch requests", "HTTP")
Rel(worker_pool, lean_engine, "Proof requests", "Local")
Rel(gh_app, postgres, "Data persistence", "SQL")
Rel(controller, redis, "Caching", "Redis Protocol")
Rel(gh_app, prometheus, "Metrics export", "Prometheus Protocol")
Rel(gh_app, loki, "Log shipping", "HTTP")
Rel(gh_app, secrets_manager, "Secret retrieval", "AWS SDK")
Rel(lean_engine, s3_bucket, "Artifact storage", "S3 API")
Rel(gh_app, github, "Webhook handling", "HTTPS")
Rel(ai_service, anthropic, "AI requests", "HTTPS")

@enduml 